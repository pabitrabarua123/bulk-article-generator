// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  age               Int?
  dailyBalance      Int              @default(30)
  LiteModeBalance   Int              @default(0)
  monthyBalance     Int              @default(0)
  monthyPlan        Int              @default(0)
  lifetimeBalance   Int              @default(0)
  lifetimePlan      Int              @default(0)
  trialBalance      Int              @default(2)
  accounts          Account[]
  sessions          Session[]
  UserPlan          UserPlan?        @relation(fields: [userPlanId], references: [id])
  UserOnboarding    UserOnboarding[]
  WorkspaceUsers    WorkspaceUsers[]
  Workspace         Workspace[]
  userPlanId        String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionPlan {
  id        Int    @id @default(autoincrement())
  name      String
  productId String
  priceId   String
  price     Int
  features  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LifetimePlan {
  id        Int    @id @default(autoincrement())
  name      String
  productId String
  priceId   String
  price     Int
  features  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPlan {
  id                  String  @id @default(cuid())
  userId              String  @unique
  planId              Int?
  lemonOrderId        String?
  lemonProductId      String?
  lemonVariantId      String?
  lemonPlanName       String?
  lemonPlanPrice      String?
  lemonSubscriptionId String?

  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  validUntil DateTime?
  cancelUrl  String?
  updateUrl  String?
  status     String?
  User       User[]
}

model UserOnboarding {
  id         String   @id @default(cuid())
  userId     String
  isComplete Boolean  @default(false)
  role       String?
  source     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Workspace {
  id                         String                       @id @default(cuid())
  name                       String
  emailDomain                String?
  isDeleted                  Boolean                      @default(false)
  createdBy                  String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  WorkspaceUsers             WorkspaceUsers[]
  user                       User                         @relation(fields: [createdBy], references: [id])
  WorkspacePendingInvitation WorkspacePendingInvitation[]
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model WorkspaceUsers {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model WorkspacePendingInvitation {
  id          String        @id @default(cuid())
  workspaceId String
  email       String
  role        WorkspaceRole
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
}

model Todo {
  id          String   @id @default(cuid())
  text        String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Articles {
  id            String   @id @default(cuid())
  userId        String
  keyword       String
  content       String
  batch         String
  articleType   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
